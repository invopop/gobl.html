package components

import (
	"context"
	"fmt"
	"io/fs"
	"path/filepath"

	"github.com/invopop/gobl"
	"github.com/invopop/gobl.html/assets"
	"github.com/invopop/gobl.html/components/bill"
	"github.com/invopop/gobl.html/components/note"
	"github.com/invopop/gobl.html/components/org"
	"github.com/invopop/gobl.html/internal"
	"github.com/invopop/gobl.html/layout"
	gbill "github.com/invopop/gobl/bill"
	gnote "github.com/invopop/gobl/note"
	gorg "github.com/invopop/gobl/org"
)

templ Envelope(env *gobl.Envelope) {
	<html data-theme="light">
		<head>
			<title>GOBL HTML Generator</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet"/>
			@stylesheets()
		</head>
		<body
			if applyLetterLayout(ctx) {
				class="letter"
			}
		>
			<article class="envelope">
				// footer required at start to appear on all pages
				@footerPrint(env)
				switch doc := env.Extract().(type) {
					case *gbill.Invoice:
						@bill.Invoice(env, doc)
					case *gbill.Receipt:
						@bill.Receipt(env, doc)
					case *gnote.Message:
						@note.Message(doc)
					case *gorg.Party:
						@org.Party(doc)
					default:
						<p>Unkown document type</p>
				}
				@footerScreen(env)
			</article>
		</body>
	</html>
}

templ stylesheets() {
	if opts := internal.Options(ctx); opts != nil {
		if opts.EmbedStylesheets {
			for _, data := range stylesheetData() {
				@templ.Raw(`<style type="text/css">` + data + `</style>`)
			}
		} else {
			for _, ss := range stylesheetFilenames() {
				<link rel="stylesheet" href={ ss }/>
			}
		}
	}
}

// stylesheetFilenames just provides the filenames of all the styles
func stylesheetFilenames() []string {
	list := []string{}
	err := fs.WalkDir(assets.Content, "styles", func(path string, _ fs.DirEntry, _ error) error {
		if filepath.Ext(path) != ".css" {
			return nil
		}
		list = append(list, path)
		return nil
	})
	if err != nil {
		panic(err)
	}
	return list
}

// stylesheetData provides a list of data objects of all the stylesheets
func stylesheetData() []string {
	list := make([]string, 0)
	err := fs.WalkDir(assets.Content, "styles", func(path string, _ fs.DirEntry, _ error) error {
		if filepath.Ext(path) != ".css" {
			return nil
		}
		data, err := fs.ReadFile(assets.Content, path)
		if err != nil {
			return fmt.Errorf("reading file: %w", err)
		}
		list = append(list, string(data))
		return nil
	})
	if err != nil {
		panic(err)
	}
	return list
}

// applyLetterLayout returns true if the options Layout is set to Letter
func applyLetterLayout(ctx context.Context) bool {
	opts := internal.Options(ctx)

	return opts.Layout == layout.Letter
}
