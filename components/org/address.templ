package org

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/org"
	"strings"
)

templ Address(addr *org.Address) {
	<div class="org-address">
		@addressLines(addr)
	</div>
}

templ AddressWithLabel(addr *org.Address) {
	<div class="org-address">
		if addr.Label != "" {
			<span class="label">
				@t.T("org.address.label", i18n.M{"label": addr.Label})
				&nbsp;
			</span>
		}
		@addressLines(addr)
	</div>
}

templ addressLines(addr *org.Address) {
	if txt := strings.Join(buildAddressLines(addr), ", "); txt != "" {
		<span>
			{ txt }
			if addr.Country != "" {
				@t.T("org.address.country", i18n.M{"country": i18n.T(ctx, "country_names."+addr.Country.String())})
			}
		</span>
	}
}

func buildAddressLines(addr *org.Address) []string {
	lines := []string{}
	if addr.Street != "" {
		lines = append(lines, buildStreetWithNumbers(addr))
	}
	if addr.StreetExtra != "" {
		lines = append(lines, addr.StreetExtra)
	}
	if addr.Locality != "" {
		lines = append(lines, addr.Locality)
	}
	if addr.Region != "" {
		lines = append(lines, addr.Region)
	}
	if addr.Code != "" {
		lines = append(lines, addr.Code.String())
	}
	return lines
}

func buildStreetWithNumbers(addr *org.Address) string {
	str := addr.Street
	if addr.Number != "" {
		if addrNumberFirst(addr) {
			str = addr.Number + " " + str
		} else {
			str = str + " " + addr.Number
		}
	}
	return str
}

func addrNumberFirst(addr *org.Address) bool {
	// TODO: add more countries here!
	switch addr.Country {
	case "GB", "US", "CA", "FR":
		return true
	default:
		return false
	}
}
