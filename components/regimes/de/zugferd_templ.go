// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package de

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/invopop/gobl"
	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/l10n"
)

// ZugferdMetadata adds the Zugferd metadata to the envelope.
func ZugferdMetadata(env *gobl.Envelope) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if inv, ok := env.Extract().(*bill.Invoice); ok {
			if inv.Regime.Country == l10n.DE.Tax() {
				templ_7745c5c3_Err = generateXMPMetadata().Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" <meta name=\"x-gobl-zugferd\" content=\"true\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		return templ_7745c5c3_Err
	})
}

func generateXMPMetadata() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        PDF.xmp = \"data:application/xml,\" + encodeURIComponent(`<?xpacket begin=\"\"?>\n<x:xmpmeta xmlns:x=\"adobe:ns:meta/\"\n           xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n  <rdf:RDF>\n    <rdf:Description xmlns:pdfaExtension=\"http://www.aiim.org/pdfa/ns/extension/\"\n                     xmlns:pdfaField=\"http://www.aiim.org/pdfa/ns/field#\"\n                     xmlns:pdfaProperty=\"http://www.aiim.org/pdfa/ns/property#\"\n                     xmlns:pdfaSchema=\"http://www.aiim.org/pdfa/ns/schema#\"\n                     xmlns:pdfaType=\"http://www.aiim.org/pdfa/ns/type#\"\n                     rdf:about=\"\">\n      <pdfaExtension:schemas>\n        <rdf:Bag>\n          <rdf:li rdf:parseType=\"Resource\">\n            <pdfaSchema:schema>ZUGFeRD PDFA Extension Schema</pdfaSchema:schema>\n            <pdfaSchema:namespaceURI>urn:zugferd:pdfa:CrossIndustryDocument:invoice:2p0#</pdfaSchema:namespaceURI>\n            <pdfaSchema:prefix>fx</pdfaSchema:prefix>\n            <pdfaSchema:property>\n              <rdf:Seq>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>DocumentFileName</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>name of the embedded XML invoice file</pdfaProperty:description>\n                </rdf:li>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>DocumentType</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>INVOICE</pdfaProperty:description>\n                </rdf:li>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>Version</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>The actual version of the ZUGFeRD data</pdfaProperty:description>\n                </rdf:li>\n                <rdf:li rdf:parseType=\"Resource\">\n                  <pdfaProperty:name>ConformanceLevel</pdfaProperty:name>\n                  <pdfaProperty:valueType>Text</pdfaProperty:valueType>\n                  <pdfaProperty:category>external</pdfaProperty:category>\n                  <pdfaProperty:description>The conformance level of the ZUGFeRD data</pdfaProperty:description>\n                </rdf:li>\n              </rdf:Seq>\n            </pdfaSchema:property>\n          </rdf:li>\n        </rdf:Bag>\n      </pdfaExtension:schemas>\n    </rdf:Description>\n    <rdf:Description xmlns:fx=\"urn:zugferd:pdfa:CrossIndustryDocument:invoice:2p0#\"\n                     fx:ConformanceLevel=\"EN 16931\"\n                     fx:DocumentFileName=\"zugferd-invoice.xml\"\n                     fx:DocumentType=\"INVOICE\"\n                     fx:Version=\"1p0\"\n                     rdf:about=\"\"/>\n  </rdf:RDF>\n</x:xmpmeta>\n<?xpacket end=\"w\"?>`);\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
