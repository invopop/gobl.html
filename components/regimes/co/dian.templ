package co

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/invopop/gobl"
	"github.com/invopop/gobl.html/components/images"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/addons/co/dian"
	"github.com/invopop/gobl/bill"
	"regexp"
)

var dianQRHTTPRegexp = regexp.MustCompile(`https.+`)

templ DIANQR(env *gobl.Envelope, inv *bill.Invoice) {
	if cude := dianCUDE(env); cude != "" {
		if qr := dianQR(env); qr != "" {
			@generateQR(inv, cude, qr)
		}
	}
}

templ generateQR(inv *bill.Invoice, code, qr string) {
	<style type="text/css">
        .dian-qr {
			display: flex;
            font-family: monospace;
            font-size: 7pt;
        }
		.dian-qr .image {
			margin-right: 6mm;
		}
		.dian-qr .text {
			margin-top: auto;
			word-break: break-all;
		}
        .dian-qr img {
            width: 24mm;
            height: 24mm;
        }
    </style>
	<section class="dian-qr">
		<div class="image">
			<a href={ templ.URL(dianURL(qr)) }>
				@images.QR(qr)
			</a>
		</div>
		<div class="text">
			if pcude := dianPrecedingCUDE(inv); pcude != "" {
				<div class="cude">
					@t.T("regimes.co.cude", i18n.M{"cude": code})
				</div>
				<div class="cufe">
					@t.T("regimes.co.preceding_cufe", i18n.M{"cufe": pcude})
				</div>
			} else {
				<div class="cufe">
					@t.T("regimes.co.cufe", i18n.M{"cufe": code})
				</div>
			}
		</div>
	</section>
}

func dianURL(qr string) string {
	return dianQRHTTPRegexp.FindString(qr)
}

func dianCUDE(env *gobl.Envelope) string {
	for _, stamp := range env.Head.Stamps {
		switch stamp.Provider {
		case dian.StampCUDE:
			return stamp.Value
		}
	}
	return ""
}

func dianPrecedingCUDE(inv *bill.Invoice) string {
	if len(inv.Preceding) == 0 {
		return ""
	}
	for _, stamp := range inv.Preceding[0].Stamps {
		switch stamp.Provider {
		case dian.StampCUDE:
			return stamp.Value
		}
	}
	return ""
}

func dianQR(env *gobl.Envelope) string {
	for _, stamp := range env.Head.Stamps {
		switch stamp.Provider {
		case dian.StampQR:
			return stamp.Value
		}
	}
	return ""
}
