// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package es

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/invopop/gobl"
	"github.com/invopop/gobl.html/components/images"
	"github.com/invopop/gobl/addons/es/verifactu"
	"github.com/invopop/gobl/head"
)

// VerifactuQR generates a QR code area for the Verifactu code in the given envelope.
func VerifactuQR(env *gobl.Envelope) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if qr := verifactuQR(env); qr != "" {
			templ_7745c5c3_Err = generateVerifactuQR(qr).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

// HasVerifactuQR returns a boolean indicating whether the envelope has a Verifactu QR or not.
func HasVerifactuQR(env *gobl.Envelope) bool {
	if qr := verifactuQR(env); qr != "" {
		return true
	}
	return false
}

func generateVerifactuQR(qr string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<style type=\"text/css\">\n\t\t.verifactu {\n\t\t\tbreak-inside: avoid;\n\t\t\ttext-align: center;\n\t\t}\n\t\t.verifactu p {\n\t\t\tcolor: #030712;\n\t\t\ttext-align: center;\n\t\t\tfont-family: Inter;\n\t\t\tfont-size: 9px;\n\t\t\tfont-weight: 600;\n\t\t\tline-height: 12px;\n\t\t\tmargin-bottom: 8px;\n\t\t}\n\t\t.verifactu .label {\n\t\t\tcolor: #4B5563;\n\t\t\tfont-family: monospace;\n\t\t\tfont-size:9px;\n\t\t\ttext-align: center; \n\t\t\tmargin-top: 8px;\n\t\t}\n\t\t.verifactu img {\n\t\t\twidth: 35mm;\n\t\t\theight: 35mm;\n\t\t}\n\t</style><section class=\"qr\"><div class=\"verifactu\"><p>QR tributario:</p><div class=\"qr\"><a href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 templ.SafeURL
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinURLErrs(templ.URL(qr))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/regimes/es/verifactu.templ`, Line: 58, Col: 27}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = images.QR(qr).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</a></div><div class=\"label\">VERI*FACTU</div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func verifactuQR(env *gobl.Envelope) string {
	stamp := head.GetStamp(env.Head.Stamps, verifactu.StampQR)
	if stamp != nil {
		return stamp.Value
	}
	return ""
}

var _ = templruntime.GeneratedTemplate
