// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package es

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/invopop/gobl"
	"github.com/invopop/gobl.html/components/images"
	"github.com/invopop/gobl/cbc"
)

const (
	verifactuStampCode cbc.Key = "verifactu-code"
	verifactuStampQR   cbc.Key = "verifactu-qr"
)

// VerifactuQR generates a QR code area for the Verifactu code in the given envelope.
func VerifactuQR(env *gobl.Envelope) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if result, code, qr := HasVerifactuQR(env); result {
			templ_7745c5c3_Err = generateVerifactuQR(code, qr).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return templ_7745c5c3_Err
	})
}

// HasVerifactuQR returns a boolean indicating whether the envelope has a Verifactu QR or not.
func HasVerifactuQR(env *gobl.Envelope) (bool, string, string) {
	if code := verifactuCode(env); code != "" {
		if qr := verifactuQR(env); qr != "" {
			return true, code, qr
		}
	}

	return false, "", ""
}

func generateVerifactuQR(code, qr string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style type=\"text/css\">\n\t\t.verifactu {\n\t\t\tbreak-inside: avoid;\n\t\t\ttext-align: center;\n\t\t}\n\t\t.verifactu p {\n\t\t\tcolor: #030712;\n\t\t\ttext-align: center;\n\t\t\tfont-family: Inter;\n\t\t\tfont-size: 9px;\n\t\t\tfont-weight: 600;\n\t\t\tline-height: 12px;\n\t\t\tmargin-bottom: 8px;\n\t\t}\n\t\t.verifactu .label {\n\t\t\tcolor: #4B5563;\n\t\t\tfont-family: monospace;\n\t\t\tfont-size:9px;\n\t\t\ttext-align: center; \n\t\t\tmargin-top: 8px;\n\t\t}\n\t\t.verifactu img {\n\t\t\twidth: 35mm;\n\t\t\theight: 35mm;\n\t\t}\n\t</style><section class=\"qr\"><div class=\"verifactu\"><p>QR tributario:</p><div class=\"qr\"><a href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 templ.SafeURL = templ.URL(qr)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var3)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = images.QR(qr).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</a></div><div class=\"label\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(code)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/regimes/es/verifactu.templ`, Line: 70, Col: 10}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func verifactuCode(env *gobl.Envelope) string {
	for _, stamp := range env.Head.Stamps {
		switch stamp.Provider {
		case verifactuStampCode:
			return stamp.Value
		}
	}
	return ""
}

func verifactuQR(env *gobl.Envelope) string {
	for _, stamp := range env.Head.Stamps {
		switch stamp.Provider {
		case verifactuStampQR:
			return stamp.Value
		}
	}
	return ""
}
