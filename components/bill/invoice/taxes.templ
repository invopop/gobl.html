package invoice

import (
	"fmt"

	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/tax"
	"github.com/invopop/gobl.html/components/t"
)

templ taxes(inv *bill.Invoice, taxes *tax.Total) {
	if taxes != nil && len(taxes.Categories) > 0 {
		<section class="taxes">
			@t.Scope("billing.invoice.taxes") {
				<h2>
					@t.T(".title")
				</h2>
				<table>
					<thead>
						<tr>
							<th class="category">
								@t.T(".category")
							</th>
							<th class="base">
								@t.T(".base")
							</th>
							<th class="rate">
								@t.T(".rate")
							</th>
							<th class="amount">
								@t.T(".amount")
							</th>
						</tr>
					</thead>
					<tbody>
						for _, cat := range taxes.Categories {
							for i, rate := range cat.Rates {
								@taxRateRow(inv, cat, rate, taxCategoryRowSpan(cat, i))
							}
						}
					</tbody>
				</table>
			}
		</section>
	}
}

templ taxRateRow(inv *bill.Invoice, cat *tax.CategoryTotal, rate *tax.RateTotal, span int) {
	<tr>
		if span > 0 {
			<td rowspan={ fmt.Sprint(span) } class="category">
				{ taxCategoryTotalName(ctx, inv, cat) }
			</td>
		}
		<td class="base">
			@t.LM(rate.Base)
		</td>
		<td class="rate">
			if rate.Percent != nil {
				if cat.Retained {
					@t.L(rate.Percent.Invert())
				} else {
					@t.L(*rate.Percent)
				}
			} else if txt := taxExemptionCode(rate.Ext); txt != "" {
				{ txt }
			} else {
				&mdash;
			}
			if rate.Surcharge != nil {
				+@t.P(rate.Surcharge.Percent)
			}
		</td>
		<td class="amount">
			if cat.Retained {
				@t.LM(rate.Amount.Invert())
			} else {
				@t.LM(rate.Amount)
			}
		</td>
	</tr>
}

// taxCategoryRowSpan is used to determine the rowspan for the tax category name
// which may need to be spread across multiple rows.
func taxCategoryRowSpan(ct *tax.CategoryTotal, row int) int {
	if len(ct.Rates) == 1 {
		return 1
	}
	if row == 0 {
		return len(ct.Rates)
	}
	return 0
}

func taxCategoryTotalName(ctx context.Context, inv *bill.Invoice, cat *tax.CategoryTotal) string {
	r := inv.TaxRegime()
	category := r.Category(cat.Code)
	return category.Name.In(t.Lang(ctx))
}

// taxExemptionCode looks at the exemption reasons and tries to extract the
// first code. We'll see if this is a good idea or not.
func taxExemptionCode(ext tax.Extensions) string {
	if len(ext) > 0 {
		for _, v := range ext {
			return fmt.Sprintf("(%s)", v.String())
		}
	}
	return ""
}
