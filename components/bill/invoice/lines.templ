package invoice

import (
	"fmt"
	"github.com/invopop/gobl.html/components/regimes/mx"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/org"
)

templ lines(inv *bill.Invoice) {
	@t.Scope("billing.invoice.lines") {
		@linesWithSupport(inv, prepareLineSupport(inv))
	}
}

templ linesWithSupport(inv *bill.Invoice, ls *lineSupport) {
	<section class="lines">
		<h2>
			@t.T(".title")
		</h2>
		<table>
			<thead>
				<tr>
					<th class="ref">
						@t.T(".i")
					</th>
					if ls.refs {
						<th class="ref">
							@t.T(".ref")
						</th>
					}
					<th class="description">
						@t.T(".description")
					</th>
					<th class="quantity">
						@t.T(".quantity")
					</th>
					if ls.units {
						<th class="unit">
							@t.T(".unit")
						</th>
					}
					<th class="price">
						@t.T(".price")
					</th>
					for _, cat := range ls.categories {
						<th class="tax">
							{ cat.Name.In(t.Lang(ctx)) }
						</th>
					}
					if ls.discounts {
						<th class="discount">
							@t.T(".discount")
						</th>
					}
					if ls.charges {
						<th class="charge">
							@t.T(".charges")
						</th>
					}
					<th class="total">
						@t.T(".total")
					</th>
				</tr>
			</thead>
			@linesBody(inv, ls)
			@discountsBody(inv, ls)
			@chargesBody(inv, ls)
		</table>
	</section>
}

templ linesBody(inv *bill.Invoice, ls *lineSupport) {
	<tbody>
		for _, l := range inv.Lines {
			@line(inv, l, ls)
		}
	</tbody>
}

templ line(_ *bill.Invoice, l *bill.Line, ls *lineSupport) {
	<tr>
		<td class="ref">
			{ fmt.Sprint(l.Index) }
		</td>
		if ls.refs {
			<td class="ref">
				if l.Item.Ref != "" {
					{ l.Item.Ref }
				} else {
					<!-- empty -->
				}
			</td>
		}
		<td class="description">
			<span>{ l.Item.Name }</span>
			if l.Item.Description != "" {
				<br/>
				<small>{ l.Item.Description }</small>
			}
			@identities(l.Item.Identities)
			@mx.LineExtensions(l)
		</td>
		<td class="quantity">
			@t.L(l.Quantity)
		</td>
		if ls.units {
			<td class="unit">
				if l.Item.Unit != "" {
					{ string(l.Item.Unit) }
				} else {
					<!-- empty -->
				}
			</td>
		}
		<td class="price">
			@t.LM(l.Item.Price)
			@lineItemAltPrices(l)
		</td>
		for _, cat := range ls.categories {
			<td class="tax">
				if combo := l.Taxes.Get(cat.Code); combo != nil {
					if combo.Percent != nil {
						@t.L(*combo.Percent)
					} else {
						&mdash;
					}
				} else {
					<!-- empty -->
				}
			</td>
		}
		if ls.discounts {
			<td class="discount">
				@lineGroupDiscounts(l)
			</td>
		}
		if ls.charges {
			<td class="charge">
				@lineGroupCharges(l)
			</td>
		}
		<td class="total">
			@t.LM(l.Total)
		</td>
	</tr>
}

templ identities(idents []*org.Identity) {
	if idents = presentableIdentities(idents); len(idents) > 0 {
		for _, ident := range idents {
			<span class="identity">
				<span class="label">
					if ident.Label != "" {
						{ ident.Label }
					} else {
						{ ident.Type.String() }
					}
				</span>
				<code>
					{ ident.Code.String() }
				</code>
			</span>
		}
	}
}

templ lineItemAltPrices(l *bill.Line) {
	for _, a := range l.Item.AltPrices {
		<span class="alt-price">
			@t.LCD(a.Value, a.Currency)
		</span>
	}
}

templ lineGroupDiscounts(l *bill.Line) {
	for _, d := range l.Discounts {
		if d.Percent != nil {
			@t.L(*d.Percent)
		} else {
			@t.LM(d.Amount.Invert())
		}
	}
}

templ lineGroupCharges(l *bill.Line) {
	for _, c := range l.Charges {
		if c.Percent != nil {
			@t.L(*c.Percent)
		} else {
			@t.LM(c.Amount)
		}
	}
}

templ discountsBody(inv *bill.Invoice, ls *lineSupport) {
	if len(inv.Discounts) > 0 {
		<tbody class="discounts">
			for _, row := range inv.Discounts {
				@discountRow(row, ls)
			}
		</tbody>
	}
}

templ discountRow(row *bill.Discount, ls *lineSupport) {
	<tr>
		<td class="i">
			{ fmt.Sprintf("D%d", row.Index) }
		</td>
		if ls.refs {
			<td class="ref">
				if row.Code != "" {
					{ row.Code.String() }
				} else {
					<!-- empty -->
				}
			</td>
		}
		<td class="reason">
			{ row.Reason }
		</td>
		<td class="quantity">
			<!-- no quantity -->
		</td>
		if ls.units {
			<td>
				<!-- empty -->
			</td>
		}
		<td class="percent">
			if row.Percent != nil {
				@t.L(*row.Percent)
			} else {
				<!-- empty -->
			}
		</td>
		for _, cat := range ls.categories {
			<td class="tax">
				if combo := row.Taxes.Get(cat.Code); combo != nil {
					if combo.Percent != nil {
						@t.L(*combo.Percent)
					} else {
						&mdash;
					}
				} else {
					<!-- empty -->
				}
			</td>
		}
		if ls.discounts {
			<td>
				<!-- empty -->
			</td>
		}
		if ls.charges {
			<td>
				<!-- empty -->
			</td>
		}
		<td class="total">
			@t.LM(row.Amount.Invert())
		</td>
	</tr>
}

templ chargesBody(inv *bill.Invoice, ls *lineSupport) {
	if len(inv.Charges) > 0 {
		<tbody class="charges">
			for _, row := range inv.Charges {
				@chargeRow(row, ls)
			}
		</tbody>
	}
}

templ chargeRow(row *bill.Charge, ls *lineSupport) {
	<tr>
		<td class="ref">
			{ fmt.Sprintf("C%d", row.Index) }
		</td>
		if ls.refs {
			<td class="ref">
				if row.Code != "" {
					{ row.Code.String() }
				} else {
					<!-- empty -->
				}
			</td>
		}
		<td class="reason">
			{ row.Reason }
		</td>
		<td class="quantity">
			<!-- no quantity -->
		</td>
		if ls.units {
			<td>
				<!-- empty -->
			</td>
		}
		<td class="percent">
			if row.Percent != nil {
				@t.L(*row.Percent)
			} else {
				<!-- empty -->
			}
		</td>
		for _, cat := range ls.categories {
			<td class="tax">
				if combo := row.Taxes.Get(cat.Code); combo != nil {
					if combo.Percent == nil {
						&mdash;
					} else {
						@t.L(*combo.Percent)
					}
				} else {
					<!-- empty -->
				}
			</td>
		}
		if ls.discounts {
			<td>
				<!-- empty -->
			</td>
		}
		if ls.charges {
			<td>
				<!-- empty -->
			</td>
		}
		<td class="total">
			@t.LM(row.Amount)
		</td>
	</tr>
}
