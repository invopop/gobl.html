package invoice

import (
	"context"
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/currency"
	"github.com/invopop/gobl/pay"
)

templ totals(inv *bill.Invoice, totals *bill.Totals) {
	<section class="totals">
		@t.Scope("billing.invoice.totals") {
			<h2>
				@t.T(".title")
			</h2>
			<table>
				<tbody>
					@totalsBaseRows(inv, totals)
					@totalsPayableRows(inv, totals)
					@totalsDueRows(inv, totals)
				</tbody>
			</table>
		}
	</section>
}

templ totalsBaseRows(inv *bill.Invoice, totals *bill.Totals) {
	<tr class="sum strong">
		<th>
			@t.T(".sum")
		</th>
		<td>
			@t.LM(totals.Sum)
		</td>
	</tr>
	if totals.Discount != nil {
		<tr class="discount">
			<th>
				@t.T(".discount")
			</th>
			<td>
				@t.LM(totals.Discount.Invert())
			</td>
		</tr>
	}
	if totals.Charge != nil {
		<tr class="charges">
			<th>
				@t.T(".charge")
			</th>
			<td>
				@t.LM(*totals.Charge)
			</td>
		</tr>
	}
	if totals.TaxIncluded != nil {
		<tr>
			<th>
				@t.T(".prices_include", i18n.M{"tax": totalPricesIncludeTax(ctx, inv)})
			</th>
			<td>
				@t.LM(*totals.TaxIncluded)
			</td>
		</tr>
	}
	if !totals.Total.Equals(totals.Sum) {
		<tr class="total">
			<th>
				@t.T(".total")
			</th>
			<td>
				@t.LM(totals.Total)
			</td>
		</tr>
	}
	if totals.Taxes != nil && len(totals.Taxes.Categories) > 0 && (totals.TaxIncluded == nil || !totals.TaxIncluded.Equals(totals.Tax)) {
		<tr class="tax">
			<th>
				@t.T(".taxes")
			</th>
			<td>
				@t.LM(totals.Tax)
			</td>
		</tr>
	}
	if !totals.TotalWithTax.Equals(totals.Payable) {
		<tr class="total-with-tax strong">
			<th>
				@t.T(".total_with_tax")
			</th>
			<td>
				@t.LM(totals.TotalWithTax)
			</td>
		</tr>
	}
}

templ totalsPayableRows(inv *bill.Invoice, totals *bill.Totals) {
	<tr class="payable strong">
		<th>
			if inv.Type.In(bill.InvoiceTypeCreditNote) {
				// Credit notes aren't necessarily payable.
				// Use a generic term for the total label
				@t.T(".total")
			} else {
				@t.T(".total_to_pay")
			}
		</th>
		<td>
			@t.LM(totals.Payable)
		</td>
	</tr>
	for _, er := range totalExchangeRates(inv) {
		<tr class="exchange-rate">
			<th>
				@t.T(".exchange_rate", i18n.M{"to": er.To, "amount": t.Localize(ctx, er.Amount)})
			</th>
			<td>
				@t.LCD(er.Convert(totals.Payable), er.To)
			</td>
		</tr>
	}
}

templ totalsDueRows(inv *bill.Invoice, totals *bill.Totals) {
	if totals.Advances != nil {
		for _, adv := range inv.Payment.Advances {
			<tr class="advance">
				<th>
					@t.T(".advance", advanceMap(adv))
				</th>
				<td>
					@t.LM(adv.Amount)
				</td>
			</tr>
		}
		if len(inv.Payment.Advances) > 1 {
			<tr class="advance-sum">
				<th>
					@t.T(".advance_sum")
				</th>
				<td>
					@t.LM(*totals.Advances)
				</td>
			</tr>
		}
		<tr class="due strong">
			<th>
				@t.T(".due_sum")
			</th>
			<td>
				@t.LM(*totals.Due)
			</td>
		</tr>
	}
}

func totalPricesIncludeTax(ctx context.Context, inv *bill.Invoice) string {
	if inv.Tax == nil || inv.Tax.PricesInclude == "" {
		return ""
	}
	r := inv.RegimeDef()
	category := r.CategoryDef(inv.Tax.PricesInclude)
	if category == nil {
		return inv.Tax.PricesInclude.String()
	}
	return category.Name.In(t.Lang(ctx))
}

func totalExchangeRates(inv *bill.Invoice) []*currency.ExchangeRate {
	list := make([]*currency.ExchangeRate, 0, len(inv.ExchangeRates))
	for _, er := range inv.ExchangeRates {
		if er.From == inv.Currency {
			list = append(list, er)
		}
	}
	return list
}

func advanceMap(adv *pay.Advance) i18n.M {
	txt := adv.Description
	if adv.Ref != "" {
		txt = fmt.Sprintf("%s (%s)", txt, adv.Ref)
	}
	date := ""
	if adv.Date != nil {
		// TODO: add date formatting
		date = adv.Date.String()
	}
	return i18n.M{"date": date, "txt": txt}
}
