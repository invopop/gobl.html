package bill

import (
	"context"
	"fmt"

	"github.com/invopop/gobl"

	"github.com/invopop/gobl.html/internal/doc"
	"github.com/invopop/gobl.html/components/regimes/co"
	"github.com/invopop/gobl.html/components/regimes/es"
	"github.com/invopop/gobl.html/components/regimes/gr"
	"github.com/invopop/gobl.html/components/regimes/mx"
	"github.com/invopop/gobl.html/components/regimes/pl"
	"github.com/invopop/gobl.html/components/regimes/pt"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl.html/components/utils"
	"github.com/invopop/gobl.html/internal"
	"github.com/invopop/gobl.html/layout"
	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/cbc"
	"github.com/invopop/gobl/org"
	"github.com/invopop/gobl/tax"
)

// Invoice renders a complete GOBL bill.Invoice object.
templ Invoice(env *gobl.Envelope, inv *bill.Invoice) {
	@t.Scope("billing.invoice") {
		<article class={ "invoice", templ.KV("din5008", applyDIN5008(ctx)) }>
			<header class={ templ.KV("with-qr", hasHeaderQR(env)), templ.KV("regular", !hasHeaderQR(env)) }>
				if applyDIN5008(ctx) {
					@din5008Header(env, inv)
				} else {
					@defaultHeader(env, inv)
				}
			</header>
			@lines(inv)
			<div class="tail">
				<div class="totals">
					@totals(inv, inv.Totals)
					@taxes(inv.RegimeDef(), inv.Totals.Taxes)
				</div>
				@paymentDetails(inv)
				@notes(inv.Notes)
				<div class="extensions">
					// Region specific information
					@co.DIANQR(env, inv)
					@mx.CFDI(env, inv)
					@pl.KSeFQR(env)
					@pt.ATQR(env)
					@gr.IAPR(env)
				</div>
			</div>
		</article>
		@multipage(env, doc.For(inv))
	}
}

templ title(env *gobl.Envelope, doc doc.Document) {
	@t.Scope(".title") {
		<section class="title">
			@titleHero(doc.GetSupplier())
			@titleType(doc)
			<h2 class="code">
				@titleCode(doc)
				@titleBadges(env, doc)
			</h2>
		</section>
	}
}

templ titleHero(sup *org.Party) {
	<div class="hero">
			if img := supplierLogo(ctx, sup); img != nil {
				<img src={ img.URL } alt={ img.Label } height={ logoHeight(img) }/>
			} else {
				<div class="alias">
					{ supplierAlias(sup) }
				</div>
			}
	</div>
}

templ titleCode(doc doc.Document) {
	if isNonStandardInvoice(doc) {
		<span class="document-type">
		@utils.Coalesce(
			pt.TitleType(doc),
			defaultTitleType(doc),
		)
		</span>
		{ " " }
	}
	<span class="series-and-code">
		@joinCode(doc, doc.GetSeries(), doc.GetCode())
	</span>
}

templ joinCode(doc doc.Document, series, code cbc.Code) {
	@utils.Coalesce(
		pt.JoinCode(doc, series, code),
		defaultJoinCode(doc, series, code),
	)
}

templ defaultJoinCode(_ doc.Document, series, code cbc.Code) {
	{ series.Join(code).String() }
}

templ titleType(doc doc.Document) {
	// We show the type with the code if it has a preceding doc. 
	if !isNonStandardInvoice(doc) {
		<h1 class="type">
			@utils.Coalesce(
				pt.TitleType(doc),
				defaultTitleType(doc),
			)
		</h1>
	}
}

templ defaultTitleType(doc doc.Document) {
	if isSimplifiedInvoice(doc) {
		@t.T(".standard-simplified")
	} else {
		@t.T("." + string(doc.GetType()))
	}
}

templ titleBadges(env *gobl.Envelope, doc doc.Document) {
	if voided(ctx) {
		<span class="void">
			@t.T(".void")
		</span>
	} else if paid(doc) {
		<span class="paid">
			@t.T(".paid")
		</span>
	}
	@pt.TitleBadges(doc)
}

templ defaultHeader(env *gobl.Envelope, inv *bill.Invoice) {
	{{ doc := doc.For(inv) }}
	<div class="details">
		@title(env, doc)
		@summary(inv)
	</div>
	// Spanish QRs
	@es.VerifactuQR(env)
	@es.TicketBAIQR(env)
	<div class="contacts">
		@supplier(doc)
		@customer(doc)
	</div>
}

templ din5008Header(env *gobl.Envelope, inv *bill.Invoice) {
	{{ doc := doc.For(inv) }}
	<div>
		@title(env, doc)
		@customer(doc)
	</div>
	<div>
		@summary(inv)
		@supplier(doc)
	</div>
}

func supplierAlias(sup *org.Party) string {
	if sup.Alias != "" {
		return sup.Alias
	}
	return sup.Name
}

func supplierLogo(ctx context.Context, sup *org.Party) *org.Image {
	opts := internal.Options(ctx)
	if opts.Logo != nil {
		return opts.Logo
	}
	if len(sup.Logos) > 0 {
		return sup.Logos[0]
	}
	return nil
}

func logoHeight(img *org.Image) string {
	if img.Height != 0 {
		return fmt.Sprint(img.Height)
	}
	return "40" // pixels
}

func applyDIN5008(ctx context.Context) bool {
	opts := internal.Options(ctx)

	return opts.Layout == layout.DIN5008
}

func hasHeaderQR(env *gobl.Envelope) bool {
	return es.HasVerifactuQR(env) || es.HasTicketBAIQR(env)
}

func voided(ctx context.Context) bool {
	opts := internal.Options(ctx)

	return opts.Void
}

func isSimplifiedInvoice(doc doc.Document) bool {
	if inv, ok := doc.Extract().(*bill.Invoice); ok {
		return inv.HasTags(tax.TagSimplified) && inv.Type == bill.InvoiceTypeStandard
	}
	return false
}

func isNonStandardInvoice(doc doc.Document) bool {
	switch doc.GetType() {
	case bill.InvoiceTypeCreditNote, bill.InvoiceTypeDebitNote, bill.InvoiceTypeCorrective, bill.InvoiceTypeProforma:
	  return true
	default:
	  return false
	}
}
