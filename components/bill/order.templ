package bill

import (
	"github.com/invopop/gobl"
	"github.com/invopop/gobl.html/components/regimes/pt"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl.html/components/utils"
	"github.com/invopop/gobl/bill"
	gorg "github.com/invopop/gobl/org"
	"github.com/invopop/gobl/tax"
)

// Order renders a complete GOBL bill.Order object.
templ Order(env *gobl.Envelope, ord *bill.Order) {
	@t.Scope("billing.order") {
		<article class="order">
			<header class="regular">
				@orderHeader(env, ord)
			</header>
			@orderLines(ord)
			<div class="totals">
				@orderTotals(ord, ord.Totals)
				@taxes(ord.RegimeDef(), ord.Totals.Taxes)
			</div>
			@orderPaymentDetails(ord)
			@notes(ord.Notes, ord.Supplier)
			<div class="extensions">
				// Region specific information
				@pt.ATQR(env)
			</div>
		</article>
	}
}

templ orderHeader(env *gobl.Envelope, ord *bill.Order) {
	<div class="details">
		@orderTitle(env, ord)
		@orderSummary(ord)
	</div>
	<div class="contacts">
		@contact(ord.Supplier, "supplier")
		@contact(ord.Customer, "customer")
		@contact(ord.Buyer, "buyer")
		@contact(ord.Seller, "seller")
	</div>
}

templ orderTitle(env *gobl.Envelope, ord *bill.Order) {
	@t.Scope(".title") {
		<section class="title">
			@titleHero(ord.Supplier)
			@orderTitleType(ord)
			<h2 class="code">
				@titleCode(ord.Series, ord.Code, ord.Regime)
				@titleBadges(env, ord)
			</h2>
		</section>
	}
}

templ orderTitleType(ord *bill.Order) {
	<h1 class="type">
		@utils.Coalesce(
			pt.OrderTitleType(ord),
			defaultTitleType(ord.Type),
		)
	</h1>
}

templ orderSummary(ord *bill.Order) {
	<section class="summary">
		@t.Scope(".summary") {
			<h2 class="title">
				@t.T(".title")
			</h2>
			<ul>
				<li class="issue-date">
					<span class="label">
						@t.T(".issue_date")
					</span>
					<span class="value">
						@t.L(ord.IssueDate)
					</span>
				</li>
				<li class="currency">
					<span class="label">
						@t.T(".currency")
					</span>
					<span class="value">
						{ currencyName(ctx, ord.Currency) }
					</span>
				</li>
				if ord.ValueDate != nil {
					<li class="value-date">
						<span class="label">
							@t.T(".value_date")
						</span>
						<span class="value">
							@t.L(ord.ValueDate)
						</span>
					</li>
				}
				if ord.OperationDate != nil {
					<li class="op-date">
						<span class="label">
							@t.T(".operation_date")
						</span>
						<span class="value">
							@t.L(ord.OperationDate)
						</span>
					</li>
				}
				if len(ord.Preceding) > 0 {
					@summaryPrecedingRows(ord.Preceding, ord.Regime)
				}
				if len(ord.Contracts) > 0 {
					@summaryContractRows(ord.Contracts, ord.Regime)
				}
				if ord.Period != nil {
					@summaryOrderPeriodRows(ord.Period)
				}
				if ord.Tax != nil {
					@summaryTaxExtRows(ord.Tax.Ext)
				}
			</ul>
		}
	</section>
}

// summaryContractRows renders contract information in the summary section
templ summaryContractRows(contracts []*gorg.DocumentRef, reg tax.Regime) {
	for _, contract := range contracts {
		<li class="contract">
			<span class="label">
				@t.T(".contract")
			</span>
			<span class="value">
				@titleCode(contract.Series, contract.Code, reg)
			</span>
			if contract.IssueDate != nil {
				<span class="value">
					@t.L(contract.IssueDate)
				</span>
			}
			if contract.Reason != "" {
				<span class="value">
					{ contract.Reason }
				</span>
			}
		</li>
	}
}

// orderLines renders the lines of an order document
templ orderLines(ord *bill.Order) {
	@t.Scope(".lines") {
		@linesWithSupport(ord.RegimeDef(), ord.Lines, ord.Discounts, ord.Charges)
	}
}

// orderTotals renders the totals of an order document
templ orderTotals(ord *bill.Order, totals *bill.Totals) {
	<section class="totals">
		@t.Scope(".totals") {
			<h2>
				@t.T(".title")
			</h2>
			<table>
				<tbody>
					<tr class="sum strong">
						<th>
							@t.T(".sum")
						</th>
						<td>
							@t.LM(totals.Sum)
						</td>
					</tr>
					if totals.Discount != nil {
						<tr class="discount">
							<th>
								@t.T(".discount")
							</th>
							<td>
								@t.LM(totals.Discount.Invert())
							</td>
						</tr>
					}
					if totals.Charge != nil {
						<tr class="charges">
							<th>
								@t.T(".charge")
							</th>
							<td>
								@t.LM(*totals.Charge)
							</td>
						</tr>
					}
					if !totals.Total.Equals(totals.Sum) {
						<tr class="total">
							<th>
								@t.T(".total")
							</th>
							<td>
								@t.LM(totals.Total)
							</td>
						</tr>
					}
					if totals.Taxes != nil && len(totals.Taxes.Categories) > 0 {
						<tr class="tax">
							<th>
								@t.T(".taxes")
							</th>
							<td>
								@t.LM(totals.Tax)
							</td>
						</tr>
					}
					<tr class="total-with-tax strong">
						<th>
							@t.T(".total_with_tax")
						</th>
						<td>
							@t.LM(totals.TotalWithTax)
						</td>
					</tr>
					<tr class="payable strong">
						<th>
							@t.T(".total_to_pay")
						</th>
						<td>
							@t.LM(totals.Payable)
						</td>
					</tr>
				</tbody>
			</table>
		}
	</section>
}

// orderPaymentDetails renders the payment details component for orders
templ orderPaymentDetails(ord *bill.Order) {
	if ord.Payment != nil {
		@t.Scope(".payment") {
			<section class="payment">
				<h2 class="title">
					@t.T(".title")
				</h2>
				if ord.Payment.Instructions != nil {
					@paymentInstructions(ord.Payment.Instructions)
				}
				if ord.Payment.Terms != nil {
					@paymentTerms(ord.Payment.Terms)
				}
			</section>
		}
	}
}
