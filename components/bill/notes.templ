package bill

import (
	"bytes"
	"context"
	"fmt"

	"github.com/invopop/ctxi18n/i18n"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/org"
	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/extension"
	"github.com/yuin/goldmark/renderer/html"
)

var markdown goldmark.Markdown

func init() {
	// prepare the markdown renderer
	markdown = goldmark.New(
		goldmark.WithExtensions(
			extension.NewLinkify(),
		),
		goldmark.WithRendererOptions(
			// NOTE: Please remove this!
			html.WithUnsafe(),
		),
	)
}

templ notes(notes []*org.Note, sup *org.Party) {
	if len(notes) > 0 || sup.Registration != nil {
		<section class="notes">
			@t.Scope(".notes") {
				<h2>
					@t.T(".title")
				</h2>
				for _, note := range notes {
					<div class="note">
						@templ.Raw(renderNote(note))
					</div>
				}
				if sup.Registration != nil {
					@noteRegSummary(sup.Registration)
				}
			}
		</section>
	}
}

templ noteRegSummary(reg *org.Registration) {
	<div class="note registration">
		@t.Scope(".reg") {
			<span class="title">
				@t.T(".registration")
			</span>
			if reg.Capital != nil {
				if a := registrationCapital(ctx, reg); a != "" {
					<span class="capital">
						@t.T(".capital", i18n.M{"amount": a})
					</span>
				}
			}
			if reg.Office != "" {
				<span class="office">
					{ reg.Office }
				</span>
			}
			if reg.Book != "" {
				<span class="book">
					@t.T(".book", i18n.M{"id": reg.Book})
				</span>
			}
			if reg.Volume != "" {
				<span class="volume">
					@t.T(".volume", i18n.M{"id": reg.Volume})
				</span>
			}
			if reg.Sheet != "" {
				<span class="sheet">
					@t.T(".sheet", i18n.M{"id": reg.Sheet})
				</span>
			}
			if reg.Section != "" {
				<span class="section">
					@t.T(".section", i18n.M{"id": reg.Section})
				</span>
			}
			if reg.Page != "" {
				<span class="page">
					@t.T(".page", i18n.M{"id": reg.Page})
				</span>
			}
			if reg.Entry != "" {
				<span class="entry">
					@t.T(".entry", i18n.M{"id": reg.Entry})
				</span>
			}
			if reg.Other != "" {
				<span class="other">
					{ reg.Other }
				</span>
			}
		}
	</div>
}

func renderNote(note *org.Note) string {
	txt := note.Text
	if note.Code != "" {
		txt = fmt.Sprintf("`%s` &middot; %s", note.Code, txt)
	}
	buf := new(bytes.Buffer)
	if err := markdown.Convert([]byte(txt), buf); err != nil {
		return fmt.Sprintf("!(ERR %v)", err.Error())
	}
	return buf.String()
}

func registrationCapital(ctx context.Context, reg *org.Registration) string {
	if reg.Capital != nil {
		if reg.Currency != "" {
			return t.LocalizeCurrency(ctx, *reg.Capital, reg.Currency)
		}
		return t.LocalizeMoney(ctx, *reg.Capital)
	}
	return ""
}
