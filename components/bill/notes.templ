package bill

import (
	"bytes"
	"context"
	"fmt"

	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/org"
	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/extension"
	"github.com/yuin/goldmark/renderer/html"
)

var markdown goldmark.Markdown

func init() {
	// prepare the markdown renderer
	markdown = goldmark.New(
		goldmark.WithExtensions(
			extension.NewLinkify(),
		),
		goldmark.WithRendererOptions(
			// NOTE: Please remove this!
			html.WithUnsafe(),
		),
	)
}

templ notes(notes []*org.Note) {
	if len(notes) > 0 {
		<section class="notes">
			@t.Scope(".notes") {
				<h2>
					@t.T(".title")
				</h2>
				for _, note := range notes {
					<div class="note">
						@templ.Raw(renderNote(note))
					</div>
				}
			}
		</section>
	}
}

func renderNote(note *org.Note) string {
	txt := note.Text
	if note.Code != "" {
		txt = fmt.Sprintf("`%s` &middot; %s", note.Code, txt)
	}
	buf := new(bytes.Buffer)
	if err := markdown.Convert([]byte(txt), buf); err != nil {
		return fmt.Sprintf("!(ERR %v)", err.Error())
	}
	return buf.String()
}

func registrationCapital(ctx context.Context, reg *org.Registration) string {
	if reg.Capital != nil {
		if reg.Currency != "" {
			return t.LocalizeCurrency(ctx, *reg.Capital, reg.Currency)
		}
		return t.LocalizeMoney(ctx, *reg.Capital)
	}
	return ""
}
