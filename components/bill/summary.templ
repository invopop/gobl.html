package bill

import (
	"context"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/invopop/gobl.html/components/t"
	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/cal"
	"github.com/invopop/gobl/cbc"
	"github.com/invopop/gobl/currency"
	"strings"
)

templ summary(inv *bill.Invoice) {
	<section class="summary">
		@t.Scope("billing.invoice.summary") {
			<h2 class="title">
				@t.T(".title")
			</h2>
			<ul>
				<li class="issue-date">
					<span class="label">
						@t.T(".issue_date")
					</span>
					<span class="value">
						@t.L(inv.IssueDate)
					</span>
				</li>
				<li class="currency">
					<span class="label">
						@t.T(".currency")
					</span>
					<span class="value">
						{ currencyName(ctx, inv.Currency) }
					</span>
				</li>
				if inv.ValueDate != nil {
					<li class="value-date">
						<span class="label">
							@t.T(".value_date")
						</span>
						<span class="value">
							@t.L(inv.ValueDate)
						</span>
					</li>
				}
				if inv.OperationDate != nil {
					<li class="op-date">
						<span class="label">
							@t.T(".operation_date")
						</span>
						<span class="value">
							@t.L(inv.OperationDate)
						</span>
					</li>
				}
				for _, pre := range inv.Preceding {
					<li class="preceding">
						<span class="label">
							@t.T(".preceding_invoice")
						</span>
						<span class="value">
							{ code(pre.Series, pre.Code, inv.Regime) }
						</span>
						if pre.IssueDate != nil {
							<span class="value">
								@t.L(pre.IssueDate)
							</span>
						}
						if pre.Reason != "" {
							<span class="value">
								{ pre.Reason }
							</span>
						}
					</li>
				}
				if inv.Ordering != nil {
					@summaryOrderingRows(inv.Ordering)
				}
				if inv.Tax != nil {
					for k, v := range inv.Tax.Ext {
						if label := mapTaxExtension(ctx, k); label != "" {
							<li class="tax-ext">
								<span class="label">
									{ label }
								</span>
								<span class="value">
									{ v.String() }
								</span>
							</li>
						}
					}
				}
			</ul>
		}
	</section>
}

templ summaryOrderingRows(ord *bill.Ordering) {
	if ord.Code != "" {
		<li class="ordering-code">
			<span class="label">
				@t.T(".order")
			</span>
			<span class="value">
				{ ord.Code.String() }
			</span>
		</li>
	}
	if ord.Period != nil {
		@summaryOrderPeriodRows(ord.Period)
	}
	for _, ident := range ord.Identities {
		if ident.Label != "" {
			<li class="ordering-ident">
				<span class="label">
					{ ident.Label }
				</span>
				<span class="value">
					{ ident.Code.String() }
				</span>
			</li>
		}
	}
}

templ summaryOrderPeriodRows(p *cal.Period) {
	<li class="ordering-period">
		<span class="label">
			if p.Label != "" {
				@t.T(".order_period_label", i18n.M{"label": p.Label})
			} else {
				@t.T(".order_period")
			}
		</span>
		<span class="value">
			@t.T(".order_period_range", i18n.M{"start": t.Localize(ctx, p.Start), "end": t.Localize(ctx, p.End)})
		</span>
	</li>
}

func currencyName(ctx context.Context, cur currency.Code) string {
	def := cur.Def()
	if def == nil {
		return string(cur)
	}
	// does a translation for the currency name exist?
	name := i18n.T(ctx, "currencies."+string(cur), i18n.Default(def.Name))
	return i18n.T(ctx, "billing.invoice.summary.currency_value", i18n.M{"desc": name, "code": cur})
}

func mapTaxExtension(ctx context.Context, k cbc.Key) string {
	// find the key translation
	label := i18n.T(ctx, ".ext_map."+k.String())
	if strings.HasPrefix(label, "!") { // if match found
		return ""
	}
	return label
}
